// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	userentity "antia/internal/entities/userentity"
	context "context"

	mock "github.com/stretchr/testify/mock"

	userrepo "antia/internal/usecases/app/repos/userrepo"
)

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, args
func (_m *UserStore) CreateUser(ctx context.Context, args *userrepo.CreateUserParams) (*userentity.User, error) {
	ret := _m.Called(ctx, args)

	var r0 *userentity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userrepo.CreateUserParams) (*userentity.User, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userrepo.CreateUserParams) *userentity.User); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userentity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userrepo.CreateUserParams) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserStore) DeleteUser(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserStore) GetUserByID(ctx context.Context, id uint64) (*userentity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *userentity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*userentity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *userentity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userentity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserStore creates a new instance of UserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStore {
	mock := &UserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
